{"ast":null,"code":"var _jsxFileName = \"/home/jaydin/wsl/easytemps/easy_temps/src/App.tsx\";\nimport React from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mTemps: [],\n      mFilteredList: [],\n      deviceList: [],\n      sort: null\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"logo\",\n          children: \"Easy Temps\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tempcontainer\",\n          style: {\n            backgroundColor: \"dimgray\",\n            borderRadius: \"10px\",\n            marginTop: \"40px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"deviceSelector\",\n              children: \"Select Device ID:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"deviceSelector\",\n              onChange: this.handleDeviceChange,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"All\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 33\n              }, this), this.state.deviceList.map(device => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: device.deviceId,\n                children: device.deviceId\n              }, device.deviceId, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 37\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 25\n          }, this), this.state.mFilteredList.map(temp => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"temp\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Device \", temp.deviceId]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Temperature \", temp.temp]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Humidity \", temp.humidity]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 33\n            }, this)]\n          }, temp.logId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this);\n  }\n  async componentDidMount() {\n    try {\n      const response = await fetch(`http://localhost:3001/temps/`, {\n        method: \"GET\"\n      });\n      console.log(response); // Log the response\n      const temps = await response.json();\n      console.log(temps); // Log the prizes\n      this.setState({\n        mTemps: temps,\n        mFilteredList: temps\n      });\n    } catch (error) {\n      console.error(error);\n    }\n    try {\n      const response = await fetch(`http://localhost:3001/devices/`, {\n        method: \"GET\"\n      });\n      console.log(response); // Log the response\n      const devices = await response.json();\n      console.log(devices); // Log the prizes\n      this.setState({\n        deviceList: devices\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n}\nApp.defaultProps = {};","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","App","Component","constructor","props","state","mTemps","mFilteredList","deviceList","sort","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","backgroundColor","borderRadius","marginTop","htmlFor","id","onChange","handleDeviceChange","value","map","device","deviceId","temp","humidity","logId","componentDidMount","response","fetch","method","console","log","temps","json","setState","error","devices","defaultProps"],"sources":["/home/jaydin/wsl/easytemps/easy_temps/src/App.tsx"],"sourcesContent":["import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\ntype PropsType = {};\ntype tempType = {\n    deviceId: string;\n    temp: number;\n    logId: string;\n    humidity: number;\n    tempDate: Date;\n};\ntype Device = {\n    deviceId: number;\n    storeId: number;\n    deviceDescription: string;\n};\ntype StatesType = {\n    mTemps: tempType[];\n    mFilteredList: tempType[];\n    deviceList: Device[];\n    sort: string | null;\n};\n\nexport default class App extends React.Component<PropsType, StatesType> {\n    static defaultProps: PropsType = {};\n\n    constructor(props: PropsType) {\n        super(props);\n\n        this.state = {\n            mTemps: [],\n            mFilteredList: [],\n            deviceList: [],\n            sort: null,\n        };\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <div className=\"logo\">Easy Temps</div>{\" \"}\n                    <div\n                        className=\"tempcontainer\"\n                        style={{\n                            backgroundColor: \"dimgray\",\n                            borderRadius: \"10px\",\n                            marginTop: \"40px\",\n                        }}\n                    >\n                        <div>\n                            <label htmlFor=\"deviceSelector\">\n                                Select Device ID:\n                            </label>\n                            <select\n                                id=\"deviceSelector\"\n                                onChange={this.handleDeviceChange}\n                            >\n                                <option value=\"\">All</option>\n                                {this.state.deviceList.map((device) => (\n                                    <option\n                                        value={device.deviceId}\n                                        key={device.deviceId}\n                                    >\n                                        {device.deviceId}\n                                    </option>\n                                ))}\n                            </select>\n                        </div>\n\n                        {this.state.mFilteredList.map((temp) => (\n                            <div className=\"temp\" key={temp.logId}>\n                                <p>Device {temp.deviceId}</p>\n                                <p>Temperature {temp.temp}</p>\n                                <p>Humidity {temp.humidity}</p>\n                            </div>\n                        ))}\n                    </div>\n                </header>\n            </div>\n        );\n    }\n    async componentDidMount(): Promise<void> {\n        try {\n            const response = await fetch(`http://localhost:3001/temps/`, {\n                method: \"GET\",\n            });\n            console.log(response); // Log the response\n            const temps: tempType[] = await response.json();\n            console.log(temps); // Log the prizes\n            this.setState({ mTemps: temps, mFilteredList: temps });\n        } catch (error) {\n            console.error(error);\n        }\n        try {\n            const response = await fetch(`http://localhost:3001/devices/`, {\n                method: \"GET\",\n            });\n            console.log(response); // Log the response\n            const devices: Device[] = await response.json();\n            console.log(devices); // Log the prizes\n            this.setState({ deviceList: devices });\n        } catch (error) {\n            console.error(error);\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}